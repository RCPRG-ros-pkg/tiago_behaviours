#!/usr/bin/env python
import rospy
import smach
import smach_ros

from tiago_behaviours_msgs.msg import MoveToAction
import tiago_smach.navigation

def main():
    rospy.init_node('move_to_server')
    rospy.sleep(1.0)

    # Construct state machine
    sm = tiago_smach.navigation.MoveToComplex()

    # # Smach viewer
    sis = smach_ros.IntrospectionServer('move_to_server', sm, '/SM_MOVE_TO_SERVER')
    sis.start()

    # Construct action server wrapper
    asw = smach_ros.ActionServerWrapper(
        server_name='move_to',
        action_spec=MoveToAction,
        wrapped_container=sm,
        succeeded_outcomes=['FINISHED'],
        aborted_outcomes=['FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='nav_goal_pose')
        # feedback_key='sm_feedback',
        # result_key='sm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
    sis.stop()

if __name__ == '__main__':
    main()
