#!/usr/bin/env python
# encoding: utf8

import sys

import rospy
import smach
import smach_ros

import tiago_smach.conversation
import tiago_smach.bring_goods
import tiago_smach.smach_rcprg as smach_rcprg
from tiago_smach.dynamic_agent import DynAgent

import tiago_kb.places_xml as kb_p

from tiago_smach.task_manager import PoseDescription

import pl_nouns.odmiana as ro


class Cleanup(smach_rcprg.State):
    def __init__(self, conversation_interface):
        self.conversation_interface = conversation_interface

        smach_rcprg.State.__init__(self, outcomes=['ok', 'shutdown'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(rospy.get_name(), self.__class__.__name__))
        print 'Cleanup.execute'
        self.conversation_interface.setShutdown()
        return 'ok'

#
# The SM that govenrs the highest-level behaviour.
#

class BehaviourSM(smach_rcprg.StateMachine):
    def __init__(self, sim_mode, conversation_interface, kb_places, goods_name):
        smach_rcprg.StateMachine.__init__(self, outcomes=['Finished', 'shutdown'])

        self.userdata.goal = goods_name

        with self:
            smach_rcprg.StateMachine.add('BringGoods',
                                    tiago_smach.bring_goods.BringGoods(sim_mode, conversation_interface, kb_places),
                                    transitions={'FINISHED':'Cleanup', 'PREEMPTED':'Cleanup', 'FAILED': 'Cleanup',
                                    'shutdown':'shutdown'},
                                    remapping={'goal':'goal'})

            smach_rcprg.StateMachine.add('Cleanup',
                                    Cleanup(conversation_interface),
                                    transitions={'ok':'Finished', 'shutdown':'shutdown'},
                                    remapping={ })

#
#
#

class MainSM(smach.Concurrence):
    def __init__(self):
        smach.Concurrence.__init__(self, outcomes=['PREEMPTED',
                                                    'FAILED',
                                                    'FINISHED'],
                                        default_outcome='FINISHED',
                                        outcome_map={'FINISHED':
                                            { 'task':'Finished'}})

        places_xml_filename = rospy.get_param('/kb_places_xml')
        sim_mode = str(rospy.get_param('/sim_mode'))
        assert sim_mode in ['sim', 'gazebo', 'real']

        print 'Reading KB for places from file "' + places_xml_filename + '"'
        kb_places = kb_p.PlacesXmlParser(places_xml_filename).getKB()

        if len(sys.argv) < 3:
            raise Exception('Too few arguments: ' + str(sys.argv))

        goods_name = None
        for idx in range(1, len(sys.argv), 2):
            if sys.argv[idx] == 'przedmiot':
                goods_name = sys.argv[idx+1]

        if goods_name is None:
            raise Exception('Argument "goods_name" is missing in argv: ' + str(sys.argv))        

        if isinstance(goods_name, str):
            goods_name = goods_name.decode('utf-8')
        goods_name = goods_name.encode('utf-8').decode('utf-8')

        dictionary = ro.OdmianaRzeczownikow()
        goods_name_m, goods_name_d, goods_name_b = dictionary.przypadki(goods_name)

        # Create conversation interface that is shared between all states and SMs.
        conversation_interface = tiago_smach.conversation.ConversationInterface()
        # The 'stop' command is valid in every situation, so do not autoremove it.
        #conversation_interface.addExpected( 'stop', False )

        conversation_interface.addItemType('ack',           'projects/incare-dialog-agent/agent/intents/ef92199b-d298-470c-8df3-1e1047dd70d1')
        conversation_interface.addItemType('ack_i_took',    'projects/incare-dialog-agent/agent/intents/181621b6-e91e-4244-a925-c5dc32ee1f1b')
        conversation_interface.addItemType('ack_i_gave',    'projects/incare-dialog-agent/agent/intents/d017cbd0-93f8-45b2-996e-043cdccab629')
        conversation_interface.addItemType('q_current_task', 'projects/incare-dialog-agent/agent/intents/8f45359d-ee47-4e10-a1b2-de3f3223e5b4')
        conversation_interface.addItemType('q_load',        'projects/incare-dialog-agent/agent/intents/b8743ab9-08a1-49e8-a534-abb65155c507')

        self.behaviour_sm = BehaviourSM( sim_mode, conversation_interface, kb_places, goods_name_m )
        self.conversation_sm = tiago_smach.conversation.ConversationSM( conversation_interface )

        with self:
            # Add states to the container
            smach.Concurrence.add('task', self.behaviour_sm)
            smach.Concurrence.add('conv', self.conversation_sm)

    def shutdownRequest(self):
        self.behaviour_sm.shutdownRequest()
        self.conversation_sm.shutdownRequest()
        self.request_preempt()

def main():
    da = DynAgent( 'bring_goods' )
    da.run( MainSM() )

    return 0

if __name__ == '__main__':
    main()
