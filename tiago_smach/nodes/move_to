#!/usr/bin/env python
# encoding: utf8

import sys
import time

import rospy
import smach
import smach_ros

import tiago_smach.conversation
import tiago_smach.navigation
import tiago_smach.smach_rcprg as smach_rcprg
from tiago_smach.dynamic_agent import DynAgent

import tiago_kb.places_xml as kb_p

from tiago_smach.task_manager import PoseDescription

from pl_nouns.dictionary_client import DisctionaryServiceClient

class Cleanup(smach_rcprg.State):
    def __init__(self, conversation_interface):
        self.conversation_interface = conversation_interface

        smach_rcprg.State.__init__(self, outcomes=['ok', 'shutdown'])

    def execute(self, userdata):
        rospy.loginfo('{}: Executing state: {}'.format(rospy.get_name(), self.__class__.__name__))
        print 'Cleanup.execute'
        self.conversation_interface.stop()
        return 'ok'

#
# The SM that govenrs the highest-level behaviour.
#

class MainSM(smach_rcprg.StateMachine):
    def __init__(self):
        smach_rcprg.StateMachine.__init__(self, outcomes=['Finished', 'shutdown'])

        t1 = time.time()
        places_xml_filename = rospy.get_param('/kb_places_xml')
        sim_mode = str(rospy.get_param('/sim_mode'))
        assert sim_mode in ['sim', 'gazebo', 'real']

        print 'Reading KB for places from file "' + places_xml_filename + '"'
        kb_places = kb_p.PlacesXmlParser(places_xml_filename).getKB()

        if len(sys.argv) < 3:
            raise Exception('Too few arguments: ' + str(sys.argv))

        place_name = None
        for idx in range(1, len(sys.argv), 2):
            if sys.argv[idx] == 'miejsce':
                place_name = sys.argv[idx+1]

        if place_name is None:
            raise Exception('Argument "place_name" is missing in argv: ' + str(sys.argv))        

        if isinstance(place_name, str):
            place_name = place_name.decode('utf-8')

        t2 = time.time()
        print 'reading KB for places took', (t2-t1)

        dictionary = DisctionaryServiceClient()
        place_name_m = dictionary.getCases(place_name).getCase('mianownik')

        # Tests:
        #print dictionary.getCases(u'łazienkę').getCase('mianownik')
        #print dictionary.getCases(u'szczoteczką').getCase('mianownik')

        t3 = time.time()
        print 'reading Dictionary took', (t3-t2)

        self.conversation_interface = tiago_smach.conversation.ConversationMachine([
                ('q_current_task', 'projects/incare-dialog-agent/agent/intents/8f45359d-ee47-4e10-a1b2-de3f3223e5b4'),
            ])
        self.conversation_interface.start()

        self.userdata.goal = PoseDescription({'place_name':place_name_m})

        with self:
            smach_rcprg.StateMachine.add('MoveTo',
                                    tiago_smach.navigation.MoveToComplexTorsoMid(sim_mode, self.conversation_interface, kb_places),
                                    transitions={'FINISHED':'Cleanup', 'PREEMPTED':'Cleanup', 'FAILED': 'Cleanup',
                                    'shutdown':'shutdown'},
                                    remapping={'goal':'goal'})

            smach_rcprg.StateMachine.add('Cleanup',
                                    Cleanup(self.conversation_interface),
                                    transitions={'ok':'Finished', 'shutdown':'shutdown'},
                                    remapping={ })

        t4 = time.time()
        print 'starting SMACH took', (t4-t3)

    def shutdownRequest(self):
        self.conversation_interface.stop()
        self.request_preempt()

def main():
    da = DynAgent( 'move_to' )
    da.run( MainSM() )

    return 0

if __name__ == '__main__':
    main()
