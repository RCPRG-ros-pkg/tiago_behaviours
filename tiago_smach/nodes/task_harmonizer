#!/usr/bin/env python
# encoding: utf8

import rospkg
import sys
import subprocess

import rosgraph
import rospy
from std_msgs.msg import String
from tiago_msgs.msg import Command

ID = '/rosnode'
def get_node_names(namespace=None):
    """
    @param namespace: optional namespace to scope return values by. Namespace must already be resolved.
    @type  namespace: str
    @return: list of node caller IDs
    @rtype: [str]
    @raise ROSNodeIOException: if unable to communicate with master
    """
    master = rosgraph.Master(ID)
    try:
        state = master.getSystemState()
    except socket.error:
        raise ROSNodeIOException("Unable to communicate with master!")
    nodes = []
    if namespace:
        # canonicalize namespace with leading/trailing slash
        g_ns = rosgraph.names.make_global_ns(namespace)
        for s in state:
            for t, l in s:
                nodes.extend([n for n in l if n.startswith(g_ns) or n == namespace])
    else:
        for s in state:
            for t, l in s:
                nodes.extend(l)
    return list(set(nodes))

class TaskSpec:
    def __init__(self, intent_name, task_name, priority, params_names_list):
        self.intent_name = intent_name
        self.task_name = task_name
        self.priority = priority
        self.params_names_list = params_names_list

class TaskHarmonizer:
    def __init__(self, intent_topics, tasks_spec_list, cached_rapps_path):
        self.tasks_spec_list = tasks_spec_list
        self.checkForDynamicAgentsRunning()

        self.sub_list = []
        for topic_name in intent_topics:
            self.sub_list.append( rospy.Subscriber(topic_name, Command, self.callback) )

        self.pending_task_request = None
        self.cached_rapps_path = cached_rapps_path

        self.current_subprocess = None
        self.current_task = None
        self.current_task_cmd = None

    def hasTaskSpecByIntent(self, intent_name):
        for task_spec in self.tasks_spec_list:
            if task_spec.intent_name == intent_name:
                return True
        return False

    def getTaskSpecByIntent(self, intent_name):
        for task_spec in self.tasks_spec_list:
            if task_spec.intent_name == intent_name:
                return task_spec
        raise Exception('Could not find task spec for intent "' + intent_name + '"')

    def getTaskSpecByName(self, task_name):
        for task_spec in self.tasks_spec_list:
            if task_spec.task_name == task_name:
                return task_spec
        raise Exception('Could not find task spec for task_name "' + intent_name + '"')

    def callback(self, data):
        param_dict = {}
        for param_name, param_value in zip(data.param_names, data.param_values):
            param_dict[param_name] = param_value
            print 'param_name, param_value', param_name, param_value

        task = None
        if self.hasTaskSpecByIntent(data.intent_name):
            task_spec = self.getTaskSpecByIntent(data.intent_name)
            if not self.pending_task_request is None:
                print 'ERROR: pending task request "' + self.pending_task_request[0] + '" was not consumed an ne intent for task "' + task_spec.task_name + '" arrived'
            task_param_map = {}
            for param_name in task_spec.params_names_list:
                if not param_name in param_dict:
                    print 'ERROR: parameter "' + param_name + '" is missing in intent for task "' + task_spec.task_name + '"'
                task_param_map[param_name] = param_dict[param_name]
            self.pending_task_request = (task_spec, task_param_map)

    def spin(self):
        while not rospy.is_shutdown():
            if not self.pending_task_request is None:
                if self.canRunTask( self.pending_task_request[0] ):
                    self.abortCurrentTask()
                    self.runTask( self.pending_task_request[0], self.pending_task_request[1] )
                else:
                    print 'Cannot run task "' + self.pending_task_request[0].task_name + '"'
                self.pending_task_request = None

            if not self.current_subprocess is None:
                if not self.current_subprocess.poll() is None:
                    print 'Task "' + self.current_task[0].task_name + '" has finished'
                    self.current_subprocess = None
                    self.current_task = None
            rospy.sleep(0.1)

    def abortCurrentTask(self):
        if self.current_subprocess is None:
            return

        # Send a gentle request
        self.current_task_cmd.publish('abort')

        time1 = rospy.get_rostime()
        while not rospy.is_shutdown():
            if self.current_subprocess is None:
                break

            if not self.current_subprocess.poll() is None:
                print 'Task "' + self.current_task[0].task_name + '" has finished'
                break

            time2 = rospy.get_rostime()
            if (time2-time1).to_sec() > 5.0:
                self.current_subprocess.kill()
                print 'Task "' + self.current_task[0].task_name + '" was killed'
                break

        self.current_subprocess = None
        self.current_task = None
        self.current_task_cmd = None

    def canRunTask(self, task_spec):
        return self.current_task is None or task_spec.priority > self.current_task[0].priority

    def runTask(self, task_spec, task_parameters):
        self.checkForDynamicAgentsRunning()
        print 'Running task "' + task_spec.task_name + '", parameters: ' + str(task_parameters)
        args = [self.cached_rapps_path + '/' + task_spec.task_name]
        for param_name, param_value in task_parameters.iteritems():
            args.append( param_name )
            args.append( param_value )
        print 'args:', args
        self.current_subprocess = subprocess.Popen( args )
        self.current_task = (task_spec, task_parameters)
        self.current_task_cmd = rospy.Publisher('/' + task_spec.task_name + '/task_state_cmd', String, queue_size=10)
        rospy.sleep(0.1)

    def checkForDynamicAgentsRunning(self):
        active_ros_nodes = get_node_names()
        for task_spec in self.tasks_spec_list:
            for node_name in active_ros_nodes:
                if '/' + task_spec.task_name == node_name:
                    raise Exception('There are some dynamic agents running out there...\n' + str(active_ros_nodes))

def main():
    rospy.init_node('task_harmonizer_rico')
    rospy.sleep(0.5)

    print 'Currently running nodes:'
    print get_node_names()

    # TODO: read map of intents to tasks from file downloaded from cloud (RAPP Store)
    # intent_name -> (task_name, task_param_names)
    tasks_spec_list = [
        TaskSpec('projects/incare-dialog-agent/agent/intents/176ab2ca-6250-4227-985b-cc82d5497d9f', 'bring_goods', 0, ['przedmiot']),
        TaskSpec('projects/incare-dialog-agent/agent/intents/0165eceb-9621-4a7d-aecc-7a879951da18', 'move_to', 0, ['miejsce']),
        TaskSpec('projects/incare-dialog-agent/agent/intents/7acd4325-4cdd-4e15-99be-ad545f4dddd5', 'stop', 10, []),
        TaskSpec('projects/incare-dialog-agent/agent/intents/d9e96166-030b-442f-a513-d3fa2e044030', 'wander', 0, []),
        # TESTS:
        TaskSpec('test_bring_goods', 'test_bring_goods', 0, ['przedmiot']),
        TaskSpec('test_move_to', 'test_move_to', 0, ['miejsce']),
        TaskSpec('test_stop', 'stop', 10, []),
        TaskSpec('test_wander', 'test_wander', 0, []),
    ]

    rospack = rospkg.RosPack()
    cached_rapps_path = rospack.get_path('tiago_smach') + '/nodes'
    th = TaskHarmonizer(['rico_cmd'], tasks_spec_list, cached_rapps_path)
    th.spin()

if __name__ == '__main__':
    main()

'''
Running the tests:
rostopic pub /rico_cmd tiago_msgs/Command "query_text: 'wander'
intent_name: 'test_wander'
param_names: ['']
param_values: ['']
confidence: 0.0
response_text: ''"

rostopic pub /rico_cmd tiago_msgs/Command "query_text: 'stop'
intent_name: 'test_stop'
param_names: ['']
param_values: ['']
confidence: 0.0
response_text: ''"

rostopic pub /rico_cmd tiago_msgs/Command "query_text: 'move_to'
intent_name: 'test_move_to'
param_names: ['miejsce']
param_values: ['kuchnia']
confidence: 0.0
response_text: ''"

rostopic pub /rico_cmd tiago_msgs/Command "query_text: 'bring_goods'
intent_name: 'test_bring_goods'
param_names: ['przedmiot']
param_values: ['kawa']
confidence: 0.0
response_text: ''"
'''